########################################################################
#
# File:   apps/ssar/GNUmakefile.in
# Author: Jules Bergmann
# Date:   2008-09-20
#
# Contents: Makefile for in-tree SSAR build
#
########################################################################

HAVE_CBE_SDK := @VSIP_IMPL_HAVE_CBE_SDK@
HAVE_CUDA := @VSIP_IMPL_HAVE_CUDA@

# The default precision is single (double may also be used)
precision := single

ifeq ($(precision),double)
ref_image_base := ref_image_dp
ssar_type := SSAR_BASE_TYPE=double
else
ref_image_base := ref_image_sp
ssar_type := SSAR_BASE_TYPE=float
endif

srcdir := @srcdir@
top_srcdir := @top_srcdir@
top_builddir := @top_builddir@
OBJEXT := @OBJEXT@

vpath %.cpp $(srcdir)
vpath %.hpp $(srcdir)

src := $(wildcard $(srcdir)/*.cpp)
hdr := $(wildcard $(srcdir)/*.hpp)

objects := $(patsubst $(srcdir)/%.cpp, %.$(OBJEXT), $(src))
deps    := $(patsubst $(srcdir)/%.cpp, %.d, $(src))
tests   := $(patsubst $(srcdir)/%.cpp, %.test, $(src))
xtests  := $(patsubst $(srcdir)/%.cpp, %, $(src))

CXX     := @CXX@
INC	:= -I$(top_builddir)/src -I$(top_srcdir)/src -I$(srcdir)
PROF	:= -DVSIP_PROFILE_MATVEC -DVSIP_PROFILE_SIGNAL -DVSIP_PROFILE_USER
CPPFLAGS:= $(INC) $(PROF) -D$(ssar_type) @CPPFLAGS@
CXXFLAGS:= @CXXFLAGS@
LIBS    := -lvsip_csl -lsvpp @LIBS@
LDFLAGS := -L$(top_builddir)/lib @LDFLAGS@

### Installation ###

PACKAGE_TARNAME := @PACKAGE_TARNAME@
INSTALL := @INSTALL@
INSTALL_DATA := @INSTALL_DATA@
INSTALL_SCRIPT := @INSTALL_SCRIPT@
INSTALL_PROGRAM := @INSTALL_PROGRAM@

# Order matters for the various directory variables, as autoconf makes some
# of the variables depend on the values of others.
prefix := @prefix@
exec_prefix := @exec_prefix@
datarootdir := @datarootdir@
datadir := @datadir@
includedir := @includedir@
libdir := @libdir@
builtin_libdir := @builtin_libdir@
sbindir := @sbindir@
bindir := @bindir@
# The directory for putting data that is specific to this package.
# This is not a standard variable name.
pkgdatadir := $(datadir)/$(PACKAGE_TARNAME)/ssar

fmtprof := $(top_srcdir)/scripts/fmt-profile.pl

all:

ifdef HAVE_CBE_SDK
hdr += $(wildcard $(srcdir)/cbe/host/*.hpp)

include cbe/accel/GNUmakefile.inc
endif
ifdef HAVE_CUDA
hdr += $(wildcard $(srcdir)/cuda/*.hpp)

include cuda/GNUmakefile.inc
endif


########################################################################
# Rules
########################################################################

all: ssar viewtopng diffview

clean: 
	rm -f *.o
	rm -f ssar
	rm -f viewtopng
	rm -f diffview

install:
	$(INSTALL) -d $(DESTDIR)$(pkgdatadir)
	for s in $(patsubst $(srcdir)/%, %, $(src)); do \
          $(INSTALL) -d $(DESTDIR)$(pkgdatadir)/`dirname $$s`; \
          $(INSTALL_DATA) $(srcdir)/$$s $(DESTDIR)$(pkgdatadir)/`dirname $$s`; \
        done
	for h in $(patsubst $(srcdir)/%, %, $(hdr)); do \
          $(INSTALL) -d $(DESTDIR)$(pkgdatadir)/`dirname $$h`; \
          $(INSTALL_DATA) $(srcdir)/$$h $(DESTDIR)$(pkgdatadir)/`dirname $$h`; \
        done
	$(INSTALL_DATA) makefile.standalone $(DESTDIR)$(pkgdatadir)/Makefile
ifdef HAVE_CBE_SDK
	$(INSTALL_DATA) makefile.spu.standalone $(DESTDIR)$(pkgdatadir)/Makefile.spu
endif
ifdef HAVE_CUDA
	$(INSTALL_DATA) $(srcdir)/cuda/interp.cu $(DESTDIR)$(pkgdatadir)/cuda
endif
	$(INSTALL) -d $(DESTDIR)$(pkgdatadir)/data1;
	for d in $(wildcard $(srcdir)/data1/*); do \
          $(INSTALL_DATA) $$d $(DESTDIR)$(pkgdatadir)/data1/; \
        done
	$(INSTALL) -d $(DESTDIR)$(pkgdatadir)/data3;
	for d in $(wildcard $(srcdir)/data3/*); do \
          $(INSTALL_DATA) $$d $(DESTDIR)$(pkgdatadir)/data3/; \
        done
	$(INSTALL_SCRIPT) $(srcdir)/make_images.sh $(DESTDIR)$(pkgdatadir)/
	$(INSTALL_DATA) $(srcdir)/README $(DESTDIR)$(pkgdatadir)/Readme

check: all
	@echo "Running SSAR application..."
	./ssar -o result3.view $(srcdir)/data3
	@echo
	@echo "Comparing output to reference view (should be less than -100)"
	./diffview -r result3.view $(srcdir)/data3/$(ref_image_base).view 1144 756
	@echo
	@echo "Creating viewable image of output"
	./viewtopng -s result3.view result3.png 1144 756
	@echo "Creating viewable image of reference view"
	./viewtopng -s $(srcdir)/data3/$(ref_image_base).view $(ref_image_base).png 1144 756

profile1: ssar viewtopng
	@echo "Profiling SSAR application (SCALE = 1)..."
	./ssar -o result1.view -l 10 --vsip-profile-mode=accum --vsip-profile-output=profile.out $(srcdir)/data1
	@echo "Formatting profiler output..."
	${fmtprof}  -sec -o profile1.txt profile.out
	$(srcdir)/make_images.sh result1.view $(srcdir)/data1 data1 438 160 382 266

profile3: ssar viewtopng
	@echo "Profiling SSAR application (SCALE = 3)..."
	./ssar -o result3.view -l 10 --vsip-profile-mode=accum --vsip-profile-output=profile.out $(srcdir)/data3
	@echo "Formatting profiler output..."
	${fmtprof}  -sec -o profile3.txt profile.out
	$(srcdir)/make_images.sh result3.view $(srcdir)/data3 data3 1072 480 1144 756


ssar.o: ssar.cpp kernel1.hpp

ssar: ssar.o
	@echo linking $@
	$(CXX) -o $@ $^ $(LDFLAGS) $(LIBS)

viewtopng: viewtopng.o
	@echo linking $@
	$(CXX) -o $@ $^ $(LDFLAGS) $(LIBS) -lpng

diffview: diffview.o
	@echo linking $@
	$(CXX) -o $@ $^ $(LDFLAGS) $(LIBS)

########################################################################
# Implicit Rules
########################################################################

%.o: %.cpp
	@echo compiling $(@D)/$(@F)
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) -o $@ $<

%.s: %.cpp
	@echo compiling $(@D)/$(@F)
	$(CXX) -S $(CXXFLAGS) -o $@ $<

%.d: %.cpp
	@echo generating dependencies for $(@D)/$(<F)
	$(SHELL) -ec '$(CXX) -M $(CPPFLAGS) $< \
		      | sed "s|$(*F)\\.o[ :]*|$*\\.d $*\\.o : |g" > $@' \
		|| rm -f $@

ifeq (,$(filter $(MAKECMDGOALS), xtest clean xclean))
include $(deps)
endif

