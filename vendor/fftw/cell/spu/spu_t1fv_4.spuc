/*
 * Copyright (c) 2003, 2007-8 Matteo Frigo
 * Copyright (c) 2003, 2007-8 Massachusetts Institute of Technology
 *
 * See the file COPYING for license information.
 *
 */
/* Generated by: ../../genfft/gen_twiddle_c -standalone -fma -reorder-insns -simd -compact -variables 100000 -include fftw-spu.h -trivial-stores -n 4 -name X(spu_t1fv_4) */

/*
 * This function contains 11 FP additions, 8 FP multiplications,
 * (or, 9 additions, 6 multiplications, 2 fused multiply/add),
 * 17 stack variables, 0 constants, and 8 memory accesses
 */
#include "fftw-spu.h"

void X(spu_t1fv_4) (R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms) {
     INT m;
     R *x;
     x = ri;
     for (m = mb, W = W + (mb * ((TWVL / VL) * 6)); m < me; m = m + VL, x = x + (VL * ms), W = W + (TWVL * 6), MAKE_VOLATILE_STRIDE(rs)) {
	  V T4, Tc, T9, Td, T1, T3, T2, T6, T8, T5, T7, Tb, Te, Ta, Tf;
	  T1 = LD(&(x[0]), ms, &(x[0]));
	  T2 = LD(&(x[WS(rs, 2)]), ms, &(x[0]));
	  T3 = BYTWJ(&(W[TWVL * 2]), T2);
	  T4 = VSUB(T1, T3);
	  Tc = VADD(T1, T3);
	  T5 = LD(&(x[WS(rs, 1)]), ms, &(x[WS(rs, 1)]));
	  T6 = BYTWJ(&(W[0]), T5);
	  T7 = LD(&(x[WS(rs, 3)]), ms, &(x[WS(rs, 1)]));
	  T8 = BYTWJ(&(W[TWVL * 4]), T7);
	  T9 = VSUB(T6, T8);
	  Td = VADD(T6, T8);
	  Ta = VFNMSI(T9, T4);
	  Tb = VFMAI(T9, T4);
	  ST(&(x[WS(rs, 1)]), Ta, ms, &(x[WS(rs, 1)]));
	  Tf = VADD(Tc, Td);
	  Te = VSUB(Tc, Td);
	  ST(&(x[0]), Tf, ms, &(x[0]));
	  ST(&(x[WS(rs, 3)]), Tb, ms, &(x[WS(rs, 1)]));
	  ST(&(x[WS(rs, 2)]), Te, ms, &(x[0]));
     }
}
