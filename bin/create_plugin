#! /usr/bin/env python

from optparse import OptionParser
from subprocess import *
import sys, re, struct, tempfile

def get_info(dump, verbose=False):

    # Find addresses of functions.
    #
    # This is done be readying through the objdump file once, looking
    # for all functions, which start with the form:
    #
    #    00004000 <input>:
    #        4000:       34 00 02 84     lqd     $4,0($5)
    pattern = re.compile('([0-9a-f]+) <(.+)>:')

    func = {}
    for line in dump.readlines():
        match = pattern.match(line)
        if match:
            func[match.group(2)] = int(match.group(1), 16)
    return func

def write_header(output, info, verbose=False):

    # Write out header block.
    #
    #    The first 128 bytes of the image contain header information.
    #    Currently this contains the locations of the kernel, input, and
    #    output functions (as found during step 1).
    output.write(struct.pack('!l', info['kernel']))
    output.write(struct.pack('!l', info['input']))
    output.write(struct.pack('!l', info['output']))
    if verbose:
        print "'kernel' function address is", info['kernel']
        print "'input' function address is", info['input']
        print "'output' function address is", info['output']

    # The remainder is zero padded.
    for i in range(3, 32):
        output.write(struct.pack('!l', 0))

def write_body(output, dump, verbose=False):

    # Translate opcodes/data
    #
    #    In a second pass through objdump output, translate the text,
    #    data, rodata, and ctors sections into a binary image.

    section = ''
    size = 0
    last_addr = int('4000', 16) - 4
    conv = False
        
    section_pattern = re.compile('Disassembly of section \.(.+):')
    line_pattern = re.compile('^\s*([0-9a-f]+):\s*'
                              '([0-9a-f][0-9a-f]) '
                              '([0-9a-f][0-9a-f]) '
                              '([0-9a-f][0-9a-f]) '
                              '([0-9a-f][0-9a-f])')
    for line in dump.readlines():
        match = section_pattern.match(line)
        if match:
            section = match.group(1)
            if (section.startswith('text') or
                section.startswith('data') or
                section.startswith('rodata') or
                section.startswith('ctors')):
                conv = True
            else:
                conv = False
            continue
        if not conv:
            continue

        match = line_pattern.match(line)
        if match:
            addr = int(match.group(1), 16)
            b1 = int(match.group(2), 16)
            b2 = int(match.group(3), 16)
            b3 = int(match.group(4), 16)
            b4 = int(match.group(5), 16)

            # Sometimes there are gaps in the objdump file.  Find them and
            # insert zero padding as necessary.
            while (addr - last_addr > 4):
                output.write(struct.pack('BBBB', 0,0,0,0))
                last_addr += 4;
                size += 4;

            output.write(struct.pack('BBBB', b1, b2, b3, b4))
            size += 4;
            last_addr = addr;
        

def main():

    parser = OptionParser(usage='%prog [options] INPUT')
    parser.add_option("-v", "--verbose", action="store_true",
                      dest="verbose",
                      help="print verbose output during processing")
    parser.add_option("-o", "--output", dest="filename", default="-",
                      help="write output to FILE", metavar="FILE")

    (options, args) = parser.parse_args()
    if not args:
        parser.error('No input given')
    elif len(args) > 1:
        parser.error()
    binary = args[0]
    if options.filename == '-':
        plugin = sys.stdout
    else:
        plugin = open(options.filename, 'wb')
    dump = tempfile.TemporaryFile()
    if options.verbose:
        print "running 'spu-objdump -Dz %s'"%binary
    try:
        call(['spu-objdump', '-Dz', binary], stdout=dump)
    except OSError, e:
        print "Cannot execute 'spu-objdump': %s"%e
        sys.exit(-1)
    dump.seek(0)
    info = get_info(dump, options.verbose)
    dump.seek(0)
    write_header(plugin, info, options.verbose)
    write_body(plugin, dump, options.verbose)

if __name__ == '__main__':

    main()
