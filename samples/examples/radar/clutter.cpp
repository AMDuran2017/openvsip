/* Copyright (c) 2010, 2011 CodeSourcery, Inc.  All rights reserved. */

/* Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

       * Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.
       * Redistributions in binary form must reproduce the above
         copyright notice, this list of conditions and the following
         disclaimer in the documentation and/or other materials
         provided with the distribution.
       * Neither the name of CodeSourcery nor the names of its
         contributors may be used to endorse or promote products
         derived from this software without specific prior written
         permission.

   THIS SOFTWARE IS PROVIDED BY CODESOURCERY, INC. "AS IS" AND ANY
   EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
   PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CODESOURCERY BE LIABLE FOR
   ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
   BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
   OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
   EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */

/// Description
///  Model radar clutter returns as voltage values drawn from a Weibull
///  distribution.  Random samples are generated by inverting the 
///  cumulative distribution function and transforming a set of uniformly
///  generated random samples.  This method could easily be applied to 
///  other distributions as well.


#include <vsip/core/config.hpp>
#include <vsip/initfin.hpp>
#include <vsip/vector.hpp>
#include <vsip/math.hpp>
#include <vsip/selgen.hpp>
#include <vsip/random.hpp>
#include <vsip/signal.hpp>

#include <vsip_csl/output.hpp>
#include <vsip_csl/save_view.hpp>


using namespace vsip;

// Perform a basic linear interpolation at values specified by the vector 'xi'
//  from a function defined by vectors x and y = f(x).
Vector<scalar_f>
lerp(Vector<scalar_f> x, Vector<scalar_f> y, Vector<scalar_f> xi)
{
  length_type len = x.size();
  length_type leni = xi.size();
  Vector<scalar_f> yi(leni);

  for (index_type i = 0; i < leni; ++i)
  {
    index_type idx = 1;
    while (idx < len && xi(i) > x(idx))
      ++idx;

   scalar_f x0 = x(idx > 0 ? idx - 1 : 0);
   scalar_f y0 = y(idx > 0 ? idx - 1 : 0);
   scalar_f x1 = x(idx < len ? idx : len - 1);
   scalar_f y1 = y(idx < len ? idx : len - 1);

   yi(i) = (x1 == x0 ? y1 : y0 + (xi(i) - x0) * (y1 - y0) / (x1 - x0));
  }

  return yi;
}

// Perform a running integration on the vector y = f(x) using a trapezoidal
//  approximation.
Vector<scalar_f>
ctrapz(Vector<scalar_f> x, Vector<scalar_f> y)
{
  length_type len = x.size();
  Vector<scalar_f> factors(len - 1);
  Vector<scalar_f> sums(len - 1);

  Domain<1> dom_first(0, 1, len - 1);
  Domain<1> dom_second(1, 1, len - 1);

  factors = (y(dom_first) + y(dom_second)) *
            (x(dom_second) - x(dom_first));

  cumsum<row>(factors, sums);

  return 0.5 * sums;
}

// Calculate a weibull distribution for shape parameters lambda and k.
//  This function could be replaced with another distribution in order
//  to generate different samples.
class
Weibull
{
public:
  Weibull(scalar_f lambda, scalar_f k) : lambda_(lambda), k_(k) {}

  Vector<scalar_f>
  operator()(Vector<scalar_f> in)
  {
    length_type N = in.size();
    Vector<scalar_f> base(N);
    Vector<scalar_f> exponent(N);
    Vector<scalar_f> factor(N);
    Vector<scalar_f> factor2(N);

    base = in / lambda_;
    factor = pow(base, k_ - 1.f);

    factor2 = -1.f * pow(base, k_);
    exponent = exp(factor2);

    return (k_ * factor * exponent / lambda_);
  }
private:
  scalar_f lambda_;
  scalar_f k_;
};

int 
main(int argc, char **argv)
{
  vsipl init(argc, argv);

  typedef scalar_f T;

  // First calculate the distribution of the random numbers we want to generate.
  //  In this case, a weibull distribution.
  length_type N = 1000;          // Number of samples to use
  Vector<T> x(N, T());           // Vector to hold input values
  Vector<T> pdf(N, T());         // Vector to hold the probability density function

  // Initialize the distribution parameters
  T lambda = 1.0;
  T k      = 1.5;
  Weibull weibull(lambda, k);

  x = ramp(T(), T(0.005), N);    // Set up a vector of inputs
  pdf = weibull(x);              // Compute the distribution         

  // Compute the cumulative distribution function by integrating the density
  //  function.
  Vector<T> cdf(N - 1, T());     // Vector to hold the cumulative distribution
  cdf = ctrapz(x, pdf);          // Integrate the density function

  // Use the weibull cdf to transform uniformly distributed samples
  //  into weibull distributed samples.
  length_type num_samps = 300000;        // Number of points to generate
  Vector<T> samps(num_samps);            // Vector to hold the uniform samples

  Rand<T> generator(0, 0);               // Initialize the random number generator
  samps = generator.randu(num_samps);    // Generate uniformly distributed samples

  Vector<T> weibull_samps(num_samps);    // Vector to hold the transformed samples

  // Now invert the weibull distribution via interpolation. Apply this function
  //  to the uniform samples already generated.
  weibull_samps = lerp(cdf, x(Domain<1>(N - 1)), samps);

  // Finally, inspect the distribution using a histogram to verify that the correct
  //  distribution has been sampled.
  length_type nbins = 1000;                          // Number of bins to use 
  T min_value = T();                                 // Smallest bin
  T max_value = T(5);                                // Largest bin

  // Initialize the histogram with the appropriate number of bins and range
  //  of values.
  Histogram<const_Vector, T> hist(min_value, max_value, nbins);
  Vector<T> histout(nbins);              // Vector to hold the histogram values

  histout = hist(weibull_samps);           // Compute the histogram
  histout /= T(num_samps);                 // Scale by the total number of samples

  vsip_csl::save_view("histogram.view", histout); // Save the data in binary form

  // See plot_histogram.m to view the histogram
  return 0;
}

